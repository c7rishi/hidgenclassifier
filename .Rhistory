np := length(unique(p)),
by = c
]
thresh_freq_screen = 5 * 1/length(unique(maf[[sample_id_col]])t)
thresh_freq_screen = 5 * 1/length(unique(maf[[sample_id_col]]))
thresh_freq_screen
v_keep <- v_rf_marg[v_rf >= thresh_freq_screen]$vv
dt <- dt[vv %in% v_keep]
dt
v_rf_c_mi <- dt[
# compute relative frequencies of
# variants by cancer
# then dcast
,
{
freq <- length(unique(p))
.(v_rf = freq/np[1],
v_f = freq)
},
by = .(vv, c)
][,
is_singleton := (max(v_f) == 1),
by = vv
][
is_singleton == FALSE
] %>%
dcast(
vv ~ c, fill = 0,
value.var = "v_rf"
)
cancer_prob <- np_c$prop
names(cancer_prob) <- np_c$c
# add mi values for the variants
# along with its (descending) ranks
v_rf_c_mi[
,
mi := calc_minfo(
data.matrix(.SD),
cancer_prob,
normalize = normalize_mi
),
.SDcols = names(cancer_prob)
][,
nmi_rank := rank(-mi)
]
# add mi values for the variants
# along with its (descending) ranks
v_rf_c_mi[
,
mi := calc_minfo(
data.matrix(.SD),
cancer_prob,
normalize = normalize_mi
),
.SDcols = names(cancer_prob)
][,
nmi_rank := rank(-mi)
]
# add mi values for the variants
# along with its (descending) ranks
v_rf_c_mi[
,
mi := calc_minfo(
data.matrix(.SD),
cancer_prob,
normalize = normalize_mi
),
.SDcols = names(cancer_prob)
][,
nmi_rank := rank(-mi)
]
out_mat
# add mi values for the variants
# along with its (descending) ranks
v_rf_c_mi[
,
mi := calc_minfo(
data.matrix(.SD),
cancer_prob,
normalize = normalize_mi
),
.SDcols = names(cancer_prob)
][,
nmi_rank := rank(-mi)
]
v_rf_c_mi <- dt[
# compute relative frequencies of
# variants by cancer
# then dcast
,
{
freq <- length(unique(p))
.(v_rf = freq/np[1],
v_f = freq)
},
by = .(vv, c)
][,
is_singleton := (max(v_f) == 1),
by = vv
][
is_singleton == FALSE
] %>%
dcast(
vv ~ c, fill = 0,
value.var = "v_rf"
)
cancer_prob <- np_c$prop
names(cancer_prob) <- np_c$c
# add mi values for the variants
# along with its (descending) ranks
v_rf_c_mi[
,
mi := calc_minfo(
data.matrix(.SD),
cancer_prob,
normalize = normalize_mi
),
.SDcols = names(cancer_prob)
][,
nmi_rank := rank(-mi)
]
out_mat <- v_rf_c_mi[nmi_rank <= nmi_rank_thresh]
out_mat
# arrange by descending mi
data.table::setorder(v_rf_c_mi, -mi)
data.table::setnames(v_rf_c_mi, "vv", variant_col)
v_rf_c_mi
library(hidgenclassifier)
library(hidgenclassifier)
library(hidgenclassifier)
tmp = readRDS("D:/data/pcawg_targeted_maf.RDS")
sst <- variant_screen_mi(
tmp,
variant_col = "Gene__Variant",
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
sst
c(sst)
library(hidgenclassifier)
library(hidgenclassifier)
sst <- extract_design(
tmp,
variant_col = "Gene__Variant",
# cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
?extract_cancer
library(hidgenclassifier)
sst <- extract_design(
tmp,
variant_col = "Gene__Variant",
# cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
dt <- data.table::as.data.table(maf)
data.table::setnames(
dt,
old = c(sample_id_col, variant_col),
new = c("p", "vv")
)
data.table::setkey(dt, p, vv)
setnames(
dt,
old = c(sample_id_col, variant_col),
new = c("p", "vv")
)
dt <- as.data.table(maf)
setnames(
dt,
old = c(sample_id_col, variant_col),
new = c("p", "vv")
)
setkey(dt, p, vv)
unique(
dt[,
.(p, vv)
]
)
vv_p <- unique(
dt[,
.(p, vv)
]
)[,
`:=`(
p1 = factor(p),
vv1 = factor(vv)
)
][,
.(p, p1, vv, vv1)
]
vv_p
variant_subset <- unique(dt[[variant_col]])
variant_subset
variant_subset <- unique(dt$vv)
(is.null(variant_subset))
vv_p <- unique(
dt[vv %in% variant_subset,
.(p, vv)
]
)[,
`:=`(
p1 = factor(p),
vv1 = factor(vv)
)
][,
.(p, p1, vv, vv1)
]
vv_p
Xmat <- Matrix::sparseMatrix(
i = as.integer(vv_p$p1),
j = as.integer(vv_p$vv1),
x = 1,
dims = c(nlevels(vv_p$p1), nlevels(vv_p$vv1)),
dimnames = list(levels(vv_p$p1), levels(vv_p$vv1))
)
all_p <- unique(dt$p)
(nrow(Xmat) < length(all_p))
Xmat <- Matrix::sparseMatrix(
i = as.integer(vv_p$p1),
j = as.integer(vv_p$vv1),
x = 1,
dims = c(nlevels(vv_p$p1), nlevels(vv_p$vv1)),
dimnames = list(levels(vv_p$p1), levels(vv_p$vv1))
)
all_p <- unique(dt$p)
Xmat <- Xmat %>%
fill_sparsemat_zero(all_p, variant_subset)
Xmat
library(hidgenclassifier)
library(hidgenclassifier)
sst <- extract_design(
tmp,
variant_col = "Gene__Variant",
# cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
sst
library(hidgenclassifier)
library(hidgenclassifier)
sst <- extract_design_mdesign_mcat(
tmp,
variant_col = "Hugo_Symbol",
# cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
dt <- data.table::as.data.table(maf)
dt <- data.table::as.data.table(
maf
)[,
.(sample_id_col, mfeat_col),
with = FALSE
]
dt <- data.table::as.data.table(
maf
)[,
c(sample_id_col, mfeat_col),
with = FALSE
]
library(hidgenclassifier)
library(hidgenclassifier)
sst <- extract_design_mdesign_mcat(
tmp,
mfeat_col = "Hugo_Symbol",
# cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
dt <- data.table::as.data.table(
maf
)[,
c(sample_id_col, mfeat_col),
with = FALSE
]
setnames(
dt,
old = c(sample_id_col, mfeat_col),
new = c("p", "g")
)
sst <- extract_design_mdesign_mcat(
tmp,
mfeat_col = "Hugo_Symbol",
variant_col = "Gene__Variant",
# cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
dt <- data.table::as.data.table(
maf
)[,
c(sample_id_col, mfeat_col),
with = FALSE
]
setnames(
dt,
old = c(sample_id_col, mfeat_col),
new = c("p", "g")
)
data.table::setkey(dt, p, g)
mfeat_subset = NULL
(is.null(mfeat_subset))
mfeat_subset <- unique(dt$g)
mfeat_subset <- unique(dt$g)
g_p <- unique(
dt[
g %in% mfeat_subset,
.(nv = length(unique(v))),
by = .(p, g)
]
)[,
`:=`(
p1 = factor(p),
g1 = factor(g)
)
][,
.(p, p1, g, g1)
]
dt <- data.table::as.data.table(
maf
)[,
c(sample_id_col, variant_col, mfeat_col),
with = FALSE
]
library(hidgenclassifier)
library(hidgenclassifier)
sst <- extract_design_mdesign_mcat(
tmp,
mfeat_col = "Hugo_Symbol",
variant_col = "Gene__Variant",
# cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
dt <- data.table::as.data.table(
maf
)[,
c(sample_id_col, variant_col, mfeat_col),
with = FALSE
]
setnames(
dt,
old = c(sample_id_col, variant_col, mfeat_col),
new = c("p", "v", "g")
)
data.table::setkey(dt, p, g)
mfeat_subset <- unique(dt$g)
g_p <- unique(
dt[
g %in% mfeat_subset,
.(nv = length(unique(v))),
by = .(p, g)
]
)[,
`:=`(
p1 = factor(p),
g1 = factor(g)
)
][,
.(p, p1, g, g1)
]
g_p
g_p <- unique(
dt[
g %in% mfeat_subset,
.(nv = length(unique(v))),
by = .(p, g)
]
)[,
`:=`(
p1 = factor(p),
g1 = factor(g)
)
][,
.(nv, p, p1, g, g1)
]
g_p
Xmat <- Matrix::sparseMatrix(
i = as.integer(g_p$p1),
j = as.integer(g_p$g1),
x = g_p$nv,
dims = c(nlevels(g_p$p1), nlevels(g_p$g1)),
dimnames = list(levels(g_p$p1), levels(g_p$g1))
)
all_p <- unique(dt$p)
Xmat <- Matrix::sparseMatrix(
i = as.integer(g_p$p1),
j = as.integer(g_p$g1),
x = g_p$nv,
dims = c(nlevels(g_p$p1), nlevels(g_p$g1)),
dimnames = list(levels(g_p$p1), levels(g_p$g1))
)
all_p <- unique(dt$p)
out <- Xmat %>%
fill_sparsemat_zero(all_p, unique(mfeat_subset))
out
library(hidgenclassifier)
sst <- extract_design_mdesign_mcat(
tmp,
mfeat_col = "Hugo_Symbol",
variant_col = "Gene__Variant",
# cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
sst <- extract_design_mdesign_mcat(
tmp,
mfeat_col = "Hugo_Symbol",
variant_col = "Gene__Variant",
# cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
tmp <- readRDS("D:/data/pcawg_exome_maf.RDS")
tmp0 = readRDS("D:/data/pcawg_targeted_maf.RDS")
tmp <- readRDS("D:/data/pcawg_exome_maf.RDS")
nns <- unique(tmp0$Hugo_Symbol)
sst <- variant_screen_mi(
tmp,
variant_col = "Gene__Variant",
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
sst2 <- extract_design(
tmp,
variant_col = "Gene__Variant",
variant_subset = c(sst),
# cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
sst3 <- extract_design_mdesign_mcat(
tmp,
mfeat_col = "Hugo_Symbol",
variant_col = "Gene__Variant",
sample_id_col = "patient_id",
mfeat_subset = nns
)
sst3
install.packages("learnr")
compute_mut_sig <- function(sca_data,
chromosome_col = "Chromosome",
start_position_col = "Start_Position",
end_position_col = "End_Position",
ref_col = "Reference_Allele",
alt_col = "Tumor_Seq_Allele2",
samplenames_col = "patient_id")
{
browser()
sca_vr = VRanges(
seqnames = paste0("chr", sca_data[[chromosome_col]]),
ranges = IRanges(sca_data[[end_position_col]], sca_data[[end_position_col]]),
ref = sca_data[[ref_col]],
alt = sca_data[[alt_col]],
sampleNames = sca_data[[samplenames_col]]
)
sca_vr = ucsc(sca_vr)
sca_motifs = mutationContext(sca_vr, BSgenome.Hsapiens.UCSC.hg19, unify = TRUE)
# plotMutationSpectrum(sca_motifs, "study")
#the sca_mm is a 96 by n mutation signature matrix you add to meta-regression
sca_mm = motifMatrix(sca_motifs, group = "sampleNames", normalize = F)
colnames(sca_mm)<-gsub("-", ".", colnames(sca_mm))
sca_mm
}
tmp <- readRDS("D:/data/pcawg_exome_maf.RDS")
source('~/.active-rstudio-document')
sss = compute_mut_sig(tmp, end_position_col = "Start_Position")
ranges <- IRanges::IRanges(
sca_data[[end_position_col]],
sca_data[[end_position_col]]
)
ranges
sca_vr = VariantAnnotation::VRanges(
seqnames = paste0("chr", sca_data[[chromosome_col]]),
ranges = ranges,
ref = sca_data[[ref_col]],
alt = sca_data[[alt_col]],
sampleNames = sca_data[[samplenames_col]]
)
library(SomaticSignatures)
ranges <- IRanges::IRanges(
sca_data[[end_position_col]],
sca_data[[end_position_col]]
)
sca_vr = VariantAnnotation::VRanges(
seqnames = paste0("chr", sca_data[[chromosome_col]]),
ranges = ranges,
ref = sca_data[[ref_col]],
alt = sca_data[[alt_col]],
sampleNames = sca_data[[samplenames_col]]
)
source('~/.active-rstudio-document')
sss = compute_mut_sig(tmp, end_position_col = "Start_Position")
ranges <- IRanges::IRanges(
sca_data[[start_position_col]],
sca_data[[end_position_col]]
)
tmp <- readRDS("D:/data/pcawg_exome_maf.RDS")
names(tmp)
sss = compute_mut_sig(
tmp,
end_position_col = "Start_Position",
ref_col = "Tumor_Seq_Allele1"
)
ranges <- IRanges::IRanges(
sca_data[[start_position_col]],
sca_data[[end_position_col]]
)
sca_vr = VariantAnnotation::VRanges(
seqnames = paste0("chr", sca_data[[chromosome_col]]),
ranges = ranges,
ref = sca_data[[ref_col]],
alt = sca_data[[alt_col]],
sampleNames = sca_data[[samplenames_col]]
)
sca_vr
?ucsc
??ucsc
sca_vr = SomaticSignatures::ucsc(sca_vr)
