chromosome_col = "Chromosome",
start_position_col = "Start_Position",
end_position_col = "End_Position",
ref_col = "Reference_Allele",
alt_col = "Tumor_Seq_Allele2",
sample_id_col = "patient_id"
) %>%
magrittr::set_colnames(
paste("SBS_", .)
)
?predict_smlc
# train a classifier on the training set
# using only variants (will have low accuracy
# -- no meta-feature information used
fit0 <- fit_mlogit(
X = var_design[idx_train, ],
Y = canc_resp[idx_train]
)
pred0 <- predict_mlogit(
fit = fit0,
Xnew = var_design[idx_test, ]
)
names(pred0)
odds_ratio_mlogit()
odds_ratio_mlogit
?odds_ratio_mlogit
library(hidgenclassifier)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::install()
devtools::install()
library(hidgenclassifier)
vignette(package = "hidgenclassifier")
devtools::install()
devtools::install()
devtools::install()
devtools::install()
install.packages("rlang")
devtools::install()
library(hidgenclassifier)
vignette(package = "hidgenclassifier")
library(hidgenclassifier)
library(hidgenclassifier)
vignette(package = "hidgenclassifier")
devtools::build(vignettes = TRUE)
vignette(package = "hidgenclassifier")
devtools::install_github("c7rishi/hidgenclassifier")
devtools::install_github("c7rishi/hidgenclassifier")
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE)
devtools::install_github("c7rishi/hidgenclassifier")
devtools::install_github("c7rishi/hidgenclassifier")
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE)
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE)
vignette(package = "hidgenclassifier")
vignette("impact_anlaysis", package = "hidgenclassifier")
library(hidgenclassifier)
vignette("impact_anlaysis", package = "hidgenclassifier")
?predict_smlc
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE)
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE)
cite(hidgenclassifier)
cite("hidgenclassifier")
citation("hidgenclassifier")
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE)
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE, force = TRUE)
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE, force = TRUE)
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE, force = TRUE)
install.packages("processx")
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE, force = TRUE)
devtools::build()
BiocManager::install(
c("SomaticSignatures",
"VariantAnnotation",
"IRanges",
"BSgenome.Hsapiens.UCSC.hg19")
)
library(hidgenclassifier)
tmp_fit <- readRDS("../impact_ampullary_classification/old_analysis/fit_full_hidgen_3class.RDS")
class(tmp_fit)
tmp_fit <- readRDS("../impact_ampullary_classification/old_analysis/fulldata_fit_model_list.RDS")
tmp_fit$train_3class$fit$fit.preval
tmp_fit <- readRDS("../impact_ampullary_classification/old_analysis/fulldata_fit_model_list.RDS")
hidgenclassifier:::optimal_threshold(tmp_fit)
meth <- fit$method
get_preval_prob_df <- function(fit, ...) {
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames=TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
dsid = 1,
meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
get_preval_prob_df <- function(fit, ...) {
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
dsid = 1,
meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
probs_pred_df <- get_preval_prob_df(df)
class(fit)
rm(list=ls())
tmp_fit <- readRDS(
"../impact_ampullary_classification/old_analysis/fulldata_fit_model_list.RDS"
)[[1]]
hidgenclassifier:::optimal_threshold(tmp_fit)
rm(list = ls())
library(hidgenclassifier)
tmp_fit <- readRDS(
"../impact_ampullary_classification/old_analysis/fulldata_fit_model_list.RDS"
)[[1]]
hidgenclassifier:::optimal_threshold(tmp_fit)
class(tmp_fit)
(!fit$method == "mlogit")
probs_pred_df <- get_preval_prob_df(df)
probs_pred_df <- get_preval_prob_df(fit)
get_preval_prob_df <- function(fit, ...) {
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
probs_pred_df <- get_preval_prob_df(fit)
get_preval_prob_df <- function(fit, ...) {
browser()
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
optimal_threshold <- function(fit,
measure = "fscore",
...) {
browser()
# meth <- fit$method
# if (any(!measure %in% ))
if (!fit$method == "mlogit") {
stop("Only implemented for mlogit classifier")
}
probs_pred_df <- get_preval_prob_df(fit)
# if (fit$method == "mlogit") {
#
#   probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
#     apply(1, softmax) %>%
#     t()
# }
#
# resp_class <- colnames(probs_predicted)
#
# probs_pred_df <- probs_predicted %>%
#   data.matrix() %>%
#   data.table::data.table(keep.rownames=TRUE) %>%
#   data.table::setnames("rn", "pid") %>%
#   .[,
#     `:=`(
#       obs_canc = fit$Y,
#       dsid = 1,
#       meth = meth
#     )
#   ] %>%
#   data.table::melt(
#     measure.vars = resp_class,
#     value.name = "pred_prob",
#     variable.name = "canc"
#   ) %>%
#   .[, obs_indic := as.numeric(obs_canc == canc)] %>%
#   # .[, obs_canc := NULL] %>%
#   unique()
all_classes <- colnames(probs_predicted)
thresh_res <- lapply(
all_classes,
function(this_class) {
indiv_one_v_rest_comparison(
probs_pred_df[canc == this_class],
measure = measure
)[,
class := this_class
][,
.(class, measure,
optimal_threshold, optimal_value)
]
}
) %>%
do.call(rbind, .)
out <- sapply(
measure,
function(this_meas) {
tmp <- thresh_res[measure == this_meas]
out_thresh <- tmp$optimal_threshold %>%
setNames(tmp$class)
out_val <- tmp$optimal_value %>%
setNames(tmp$class)
attr(out_thresh, "optimal_value") <- out_val
out_thresh
},
USE.NAMES = TRUE,
simplify = FALSE
)
if (length(measure) == 1) {
out <- out[[1]]
}
out
}
get_preval_prob_df <- function(fit, ...) {
browser()
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
probs_pred_df <- get_preval_prob_df(fit)
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
probs_pred_df
meth = "fscore"
probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
dsid = 1,
meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
get_preval_prob_df <- function(fit, ...) {
browser()
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
probs_pred_df <- get_preval_prob_df(fit)
get_preval_prob_df <- function(fit, ...) {
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
probs_pred_df <- get_preval_prob_df(fit)
probs_pred_df
all_classes <- colnames(probs_predicted)
fit$alpha
all_classes <- names(fit$alpha)
all_classes
thresh_res <- lapply(
all_classes,
function(this_class) {
indiv_one_v_rest_comparison(
probs_pred_df[canc == this_class],
measure = measure
)[,
class := this_class
][,
.(class, measure,
optimal_threshold, optimal_value)
]
}
) %>%
do.call(rbind, .)
all_classes
this_class = all_classes[1]
indiv_one_v_rest_comparison(
probs_pred_df[canc == this_class],
measure = measure
)
probs_pred_df
measure
probs_pred_df <- get_preval_prob_df(
fit
)[,
`:=`(
dsid = 1,
meth = meth
)
]
probs_pred_df <- get_preval_prob_df(
fit
)[,
`:=`(
dsid = 1,
meth = measure
)
]
meth <- fit$method
probs_pred_df <- get_preval_prob_df(
fit
)[,
`:=`(
dsid = 1,
meth = meth
)
]
thresh_res <- lapply(
all_classes,
function(this_class) {
indiv_one_v_rest_comparison(
probs_pred_df[canc == this_class],
measure = measure
)[,
class := this_class
][,
.(class, measure,
optimal_threshold, optimal_value)
]
}
) %>%
do.call(rbind, .)
thresh_res
out <- sapply(
measure,
function(this_meas) {
tmp <- thresh_res[measure == this_meas]
out_thresh <- tmp$optimal_threshold %>%
setNames(tmp$class)
out_val <- tmp$optimal_value %>%
setNames(tmp$class)
attr(out_thresh, "optimal_value") <- out_val
out_thresh
},
USE.NAMES = TRUE,
simplify = FALSE
)
(length(measure) == 1)
out <- out[[1]]
out
hidgenclassifier:::optimal_threshold(tmp_fit)
library(hidgenclassifier)
hidgenclassifier:::optimal_threshold(tmp_fit, "fscore")
tmp_fit <- readRDS(
"../impact_ampullary_classification/old_analysis/fulldata_fit_model_list.RDS"
)[[1]]
hidgenclassifier:::optimal_threshold(tmp_fit, "fscore")
hidgenclassifier:::optimal_threshold(tmp_fit, c("fscore", "mcc"))
