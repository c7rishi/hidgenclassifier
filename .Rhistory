tmp_fit$train_3class$fit$fit.preval
tmp_fit <- readRDS("../impact_ampullary_classification/old_analysis/fulldata_fit_model_list.RDS")
hidgenclassifier:::optimal_threshold(tmp_fit)
meth <- fit$method
get_preval_prob_df <- function(fit, ...) {
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames=TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
dsid = 1,
meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
get_preval_prob_df <- function(fit, ...) {
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
dsid = 1,
meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
probs_pred_df <- get_preval_prob_df(df)
class(fit)
rm(list=ls())
tmp_fit <- readRDS(
"../impact_ampullary_classification/old_analysis/fulldata_fit_model_list.RDS"
)[[1]]
hidgenclassifier:::optimal_threshold(tmp_fit)
rm(list = ls())
library(hidgenclassifier)
tmp_fit <- readRDS(
"../impact_ampullary_classification/old_analysis/fulldata_fit_model_list.RDS"
)[[1]]
hidgenclassifier:::optimal_threshold(tmp_fit)
class(tmp_fit)
(!fit$method == "mlogit")
probs_pred_df <- get_preval_prob_df(df)
probs_pred_df <- get_preval_prob_df(fit)
get_preval_prob_df <- function(fit, ...) {
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
probs_pred_df <- get_preval_prob_df(fit)
get_preval_prob_df <- function(fit, ...) {
browser()
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
optimal_threshold <- function(fit,
measure = "fscore",
...) {
browser()
# meth <- fit$method
# if (any(!measure %in% ))
if (!fit$method == "mlogit") {
stop("Only implemented for mlogit classifier")
}
probs_pred_df <- get_preval_prob_df(fit)
# if (fit$method == "mlogit") {
#
#   probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
#     apply(1, softmax) %>%
#     t()
# }
#
# resp_class <- colnames(probs_predicted)
#
# probs_pred_df <- probs_predicted %>%
#   data.matrix() %>%
#   data.table::data.table(keep.rownames=TRUE) %>%
#   data.table::setnames("rn", "pid") %>%
#   .[,
#     `:=`(
#       obs_canc = fit$Y,
#       dsid = 1,
#       meth = meth
#     )
#   ] %>%
#   data.table::melt(
#     measure.vars = resp_class,
#     value.name = "pred_prob",
#     variable.name = "canc"
#   ) %>%
#   .[, obs_indic := as.numeric(obs_canc == canc)] %>%
#   # .[, obs_canc := NULL] %>%
#   unique()
all_classes <- colnames(probs_predicted)
thresh_res <- lapply(
all_classes,
function(this_class) {
indiv_one_v_rest_comparison(
probs_pred_df[canc == this_class],
measure = measure
)[,
class := this_class
][,
.(class, measure,
optimal_threshold, optimal_value)
]
}
) %>%
do.call(rbind, .)
out <- sapply(
measure,
function(this_meas) {
tmp <- thresh_res[measure == this_meas]
out_thresh <- tmp$optimal_threshold %>%
setNames(tmp$class)
out_val <- tmp$optimal_value %>%
setNames(tmp$class)
attr(out_thresh, "optimal_value") <- out_val
out_thresh
},
USE.NAMES = TRUE,
simplify = FALSE
)
if (length(measure) == 1) {
out <- out[[1]]
}
out
}
get_preval_prob_df <- function(fit, ...) {
browser()
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
probs_pred_df <- get_preval_prob_df(fit)
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
probs_pred_df
meth = "fscore"
probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
dsid = 1,
meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
get_preval_prob_df <- function(fit, ...) {
browser()
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
probs_pred_df <- get_preval_prob_df(fit)
get_preval_prob_df <- function(fit, ...) {
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
probs_pred_df <- get_preval_prob_df(fit)
probs_pred_df
all_classes <- colnames(probs_predicted)
fit$alpha
all_classes <- names(fit$alpha)
all_classes
thresh_res <- lapply(
all_classes,
function(this_class) {
indiv_one_v_rest_comparison(
probs_pred_df[canc == this_class],
measure = measure
)[,
class := this_class
][,
.(class, measure,
optimal_threshold, optimal_value)
]
}
) %>%
do.call(rbind, .)
all_classes
this_class = all_classes[1]
indiv_one_v_rest_comparison(
probs_pred_df[canc == this_class],
measure = measure
)
probs_pred_df
measure
probs_pred_df <- get_preval_prob_df(
fit
)[,
`:=`(
dsid = 1,
meth = meth
)
]
probs_pred_df <- get_preval_prob_df(
fit
)[,
`:=`(
dsid = 1,
meth = measure
)
]
meth <- fit$method
probs_pred_df <- get_preval_prob_df(
fit
)[,
`:=`(
dsid = 1,
meth = meth
)
]
thresh_res <- lapply(
all_classes,
function(this_class) {
indiv_one_v_rest_comparison(
probs_pred_df[canc == this_class],
measure = measure
)[,
class := this_class
][,
.(class, measure,
optimal_threshold, optimal_value)
]
}
) %>%
do.call(rbind, .)
thresh_res
out <- sapply(
measure,
function(this_meas) {
tmp <- thresh_res[measure == this_meas]
out_thresh <- tmp$optimal_threshold %>%
setNames(tmp$class)
out_val <- tmp$optimal_value %>%
setNames(tmp$class)
attr(out_thresh, "optimal_value") <- out_val
out_thresh
},
USE.NAMES = TRUE,
simplify = FALSE
)
(length(measure) == 1)
out <- out[[1]]
out
hidgenclassifier:::optimal_threshold(tmp_fit)
library(hidgenclassifier)
hidgenclassifier:::optimal_threshold(tmp_fit, "fscore")
tmp_fit <- readRDS(
"../impact_ampullary_classification/old_analysis/fulldata_fit_model_list.RDS"
)[[1]]
hidgenclassifier:::optimal_threshold(tmp_fit, "fscore")
hidgenclassifier:::optimal_threshold(tmp_fit, c("fscore", "mcc"))
devtools::install_github("c7rishi/hidgenclassifier")
## ----setup, include=FALSE-----------------------------------------------------
knitr::opts_chunk$set(echo = TRUE)
## ----import-------------------------------------------------------------------
set.seed(42)
library(magrittr)
library(hidgenclassifier)
data("impact")
## ---- view_data---------------------------------------------------------------
impact
## ----defn, include=FALSE------------------------------------------------------
n_gene <- length(unique(impact$Hugo_Symbol))
n_pid <- length(unique(impact$patient_id))
## ----cancer_sites-------------------------------------------------------------
unique(impact$CANCER_SITE)
## ----extract_cancer-----------------------------------------------------------
canc_resp <- extract_cancer_response(
maf = impact,
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
pid <- names(canc_resp)
## ----train_test_pid-----------------------------------------------------------
set.seed(42)
folds <- data.table::data.table(
resp = canc_resp
)[,
foldid := sample(rep(1:5, length.out = .N)),
by = resp
]$foldid
# 80%-20% stratified separation of training and
# test set tumors
pid_train <- pid[folds != 5]
pid_test <- pid[folds == 5]
## ----screen_variant-----------------------------------------------------------
top_v <- variant_screen_mi(
maf = impact[patient_id %in% pid_train],
variant_col = "Variant",
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id",
mi_rank_thresh = 250,
return_prob_mi = FALSE,
do_freq_screen = FALSE
)
## ----design_variant-----------------------------------------------------------
X_variant <- extract_design(
maf = impact,
variant_col = "Variant",
sample_id_col = "patient_id",
variant_subset = top_v
)
dim(X_variant)
## ----mdesign_gene-------------------------------------------------------------
XU_gene <- extract_design_mdesign_mcat(
maf = impact,
variant_col = "Variant",
mfeat_col = "Hugo_Symbol",
sample_id_col = "patient_id",
mfeat_subset = NULL
) %>%
magrittr::set_colnames(
paste("Gene_", colnames(.))
)
dim(XU_gene)
?glmnet::predict
?glmnet::coef
?glmnet::coef.cv.glmnet
?glmnet::coef.glmnet
?glmnet::coef.glmnet
devtools::build()
install.packages("sgmcmc")
sgmcmc::installTF()
keras::install_keras()
identical(NULL, NULL)
library(hidgenclassifier)
library(hidgenclassifier)
devtools::build()
devtools::build()
devtools::build()
library(hidgenclassifier)
