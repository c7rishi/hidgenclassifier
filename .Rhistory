Rcpp::sourceCpp('src/calc_minfo.cpp')
Rcpp::sourceCpp('src/calc_minfo.cpp')
Rcpp::sourceCpp('src/calc_minfo.cpp')
rm(list=ls())
Rcpp::sourceCpp('src/calc_minfo.cpp')
dd = matrix(runif(50), 5, 10)
qq = rowSums(dd)
pp
qq
dd
dd
dd * (1/qq)
pp = dd * (1/qq)
rowSums(pp)
prob = pp
wt = rep(1/5, 5)
wt
Cpp_calc_minfo(prob_mat = prob, wt_vec = wt)
Cpp_calc_minfo(prob_mat = prob, wt_vec = wt, normalized = 1)
rm(list=ls())
install.packages(c('glmnet', 'randomForest', 'caret', 'pROC'))
library(hidgenclassifier)
devtools::build()
library(hidgenclassifier)
devtools::build()
library(hidgenclassifier)
Sys.sleep(10)
269*0.2
source('~/GitHub/hidgenclassifier/R/variant_screen_mi.R')
rm(list=ls())
library(hidgenclassifier)
data <- readRDS("D:/data/pcawg_exome_maf.RDS")
dt = readRDS("D:/data/pcawg_exome_maf.RDS")
rm(data)
variant_screen_mi(dt)
%>%
?%>%
`%>%` <- magrittr::`%>%`
dt <- data.table::as.data.table(
maf
)
names(maf)
rm(list=ls())
library(hidgenclassifier)
tmp = readRDS("D:/data/pcawg_exome_maf.RDS")
names(tmmp)
names(tmp)
variant_screen_mi(
tmp,
variant_col = "Gene_Variant",
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
dt <- data.table::as.data.table(maf)
# #[,
#   vv := get(variant_col)
# ]
data.table::setnames(
dt,
old = c(cancer_col, sample_id_col),
new = c("c", "p")
)
dt <- data.table::as.data.table(maf)
# #[,
#   vv := get(variant_col)
# ]
data.table::setnames(
dt,
old = c(variant_col, cancer_col, sample_id_col),
new = c("vv", "c", "p")
)
variant_col
maf
maf %>% names()
maf[, Gene__Variant]
maf$Gene__Variant
variant_col
maf[[variant_col]]
variant_col = "Gene__Variant"
# #[,
#   vv := get(variant_col)
# ]
data.table::setnames(
dt,
old = c(variant_col, cancer_col, sample_id_col),
new = c("vv", "c", "p")
)
data.table::setkey(dt, vv, c)
equal_cancer_prob_mi = TRUE
unique(dt$c)
dt[
,
.(np = length(unique(p))),
by = c
][,
prop := np/sum(np)
]
dt[
,
.(np = length(unique(p))),
by = c
][,
prop := np/sum(np)
]
class(dt)
np_c <- dt[
,
.(np = length(unique(p))),
by = c
][,
prop := np/sum(np)
]
np_c <- dt[
,
list(np = length(unique(p))),
by = c
][,
prop := np/sum(np)
]
names(dt)
dt[
,
list(np = length(unique(p))),
by = c
]
dt
dt[, .(gg = length(unique(p)))]
library(data.table)
dt[, .(gg = length(unique(p)))]
?.
dt[, list(gg = length(unique(p)))]
names(dt)
dt[, p]
class(dt)
dt = setDT(dt)
dt
dt[, p]
dt$p
dt[, p]
dt[, "p"]
dt[, list(p)]
rm(list=ls())
