variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
probs_pred_df
meth = "fscore"
probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y,
dsid = 1,
meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
get_preval_prob_df <- function(fit, ...) {
browser()
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
probs_pred_df <- get_preval_prob_df(fit)
get_preval_prob_df <- function(fit, ...) {
probs_predicted <- fit$fit$fit.preval[, , "s0"] %>%
apply(1, softmax) %>%
t()
resp_class <- colnames(probs_predicted)
probs_pred_df <- probs_predicted %>%
data.matrix() %>%
data.table::data.table(keep.rownames = TRUE) %>%
data.table::setnames("rn", "pid") %>%
.[,
`:=`(
obs_canc = fit$Y
# dsid = 1,
# meth = meth
)
] %>%
data.table::melt(
measure.vars = resp_class,
value.name = "pred_prob",
variable.name = "canc"
) %>%
.[, obs_indic := as.numeric(obs_canc == canc)] %>%
# .[, obs_canc := NULL] %>%
unique()
}
probs_pred_df <- get_preval_prob_df(fit)
probs_pred_df
all_classes <- colnames(probs_predicted)
fit$alpha
all_classes <- names(fit$alpha)
all_classes
thresh_res <- lapply(
all_classes,
function(this_class) {
indiv_one_v_rest_comparison(
probs_pred_df[canc == this_class],
measure = measure
)[,
class := this_class
][,
.(class, measure,
optimal_threshold, optimal_value)
]
}
) %>%
do.call(rbind, .)
all_classes
this_class = all_classes[1]
indiv_one_v_rest_comparison(
probs_pred_df[canc == this_class],
measure = measure
)
probs_pred_df
measure
probs_pred_df <- get_preval_prob_df(
fit
)[,
`:=`(
dsid = 1,
meth = meth
)
]
probs_pred_df <- get_preval_prob_df(
fit
)[,
`:=`(
dsid = 1,
meth = measure
)
]
meth <- fit$method
probs_pred_df <- get_preval_prob_df(
fit
)[,
`:=`(
dsid = 1,
meth = meth
)
]
thresh_res <- lapply(
all_classes,
function(this_class) {
indiv_one_v_rest_comparison(
probs_pred_df[canc == this_class],
measure = measure
)[,
class := this_class
][,
.(class, measure,
optimal_threshold, optimal_value)
]
}
) %>%
do.call(rbind, .)
thresh_res
out <- sapply(
measure,
function(this_meas) {
tmp <- thresh_res[measure == this_meas]
out_thresh <- tmp$optimal_threshold %>%
setNames(tmp$class)
out_val <- tmp$optimal_value %>%
setNames(tmp$class)
attr(out_thresh, "optimal_value") <- out_val
out_thresh
},
USE.NAMES = TRUE,
simplify = FALSE
)
(length(measure) == 1)
out <- out[[1]]
out
hidgenclassifier:::optimal_threshold(tmp_fit)
library(hidgenclassifier)
hidgenclassifier:::optimal_threshold(tmp_fit, "fscore")
tmp_fit <- readRDS(
"../impact_ampullary_classification/old_analysis/fulldata_fit_model_list.RDS"
)[[1]]
hidgenclassifier:::optimal_threshold(tmp_fit, "fscore")
hidgenclassifier:::optimal_threshold(tmp_fit, c("fscore", "mcc"))
devtools::install_github("c7rishi/hidgenclassifier")
## ----setup, include=FALSE-----------------------------------------------------
knitr::opts_chunk$set(echo = TRUE)
## ----import-------------------------------------------------------------------
set.seed(42)
library(magrittr)
library(hidgenclassifier)
data("impact")
## ---- view_data---------------------------------------------------------------
impact
## ----defn, include=FALSE------------------------------------------------------
n_gene <- length(unique(impact$Hugo_Symbol))
n_pid <- length(unique(impact$patient_id))
## ----cancer_sites-------------------------------------------------------------
unique(impact$CANCER_SITE)
## ----extract_cancer-----------------------------------------------------------
canc_resp <- extract_cancer_response(
maf = impact,
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
pid <- names(canc_resp)
## ----train_test_pid-----------------------------------------------------------
set.seed(42)
folds <- data.table::data.table(
resp = canc_resp
)[,
foldid := sample(rep(1:5, length.out = .N)),
by = resp
]$foldid
# 80%-20% stratified separation of training and
# test set tumors
pid_train <- pid[folds != 5]
pid_test <- pid[folds == 5]
## ----screen_variant-----------------------------------------------------------
top_v <- variant_screen_mi(
maf = impact[patient_id %in% pid_train],
variant_col = "Variant",
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id",
mi_rank_thresh = 250,
return_prob_mi = FALSE,
do_freq_screen = FALSE
)
## ----design_variant-----------------------------------------------------------
X_variant <- extract_design(
maf = impact,
variant_col = "Variant",
sample_id_col = "patient_id",
variant_subset = top_v
)
dim(X_variant)
## ----mdesign_gene-------------------------------------------------------------
XU_gene <- extract_design_mdesign_mcat(
maf = impact,
variant_col = "Variant",
mfeat_col = "Hugo_Symbol",
sample_id_col = "patient_id",
mfeat_subset = NULL
) %>%
magrittr::set_colnames(
paste("Gene_", colnames(.))
)
dim(XU_gene)
?glmnet::predict
?glmnet::coef
?glmnet::coef.cv.glmnet
?glmnet::coef.glmnet
?glmnet::coef.glmnet
devtools::build()
install.packages("sgmcmc")
sgmcmc::installTF()
keras::install_keras()
identical(NULL, NULL)
library(hidgenclassifier)
library(hidgenclassifier)
devtools::build()
devtools::build()
devtools::build()
library(hidgenclassifier)
library(hidgenclassifier)
pp <- readRDS("~/bad_hidgen.RDS")
odds_ratio_mlogit(pp)
Xmat_scale <- scale(Xmat, center = FALSE)
all_type <- c("one-vs-rest")
mu <- attr(Xmat_scale, "scaled:center")
sigma <- attr(Xmat_scale, "scaled:scale")
d <- length(mu)
d1 <- length(predictor_subset)
d1
d
d <- length(mu)
mu
Xmat_scale <- scale(Xmat)
mu <- attr(Xmat_scale, "scaled:center")
sigma <- attr(Xmat_scale, "scaled:scale")
d <- length(mu)
d1 <- length(predictor_subset)
d1
d
x0 <- tcrossprod(rep(1, d), mu)
dim(x0)
x1 <- (x0) %>%
`diag<-`(. + sigma)
x1 <- (x0) %>%
`diag<-`(diag(.) + sigma)
dimnames(x0) <- dimnames(x1) <- list(names(mu), names(mu))
x1 <- x1[predictor_subset, ]
x0 <- x0[predictor_subset, ]
x1beta <- predict_smlc(
Xnew = x1,
fit = fit,
return_lin_pred = TRUE
)$lin_pred
x0beta <- predict_smlc(
Xnew = x0[1, , drop = FALSE],
fit = fit,
return_lin_pred = TRUE
)$lin_pred %>%
as.vector() %>%
tcrossprod(
rep(1, d1),
.
)
dimnames(x0beta) <- dimnames(x1beta)
adj_const <- max(x1beta, x0beta)
adj_const
term3 <- .log_exp_shift_sum_rest_cols(x1beta, shift = adj_const)
term4 <- .log_exp_shift_sum_rest_cols(
x0beta[1, , drop = FALSE],
shift = adj_const
) %>%
as.numeric() %>%
tcrossprod(
rep(1, d1),
.
)
dimnames(term4) <- dimnames(term4)
out <- x1beta - x0beta - term3 + term4
out
term3
.log_exp_shift_sum_rest_cols
.log_exp_shift_sum_rest_cols <- function(x, shift) {
browser()
exp_x <- exp(x - shift)
nc <- ncol(exp_x)
rs_x <- rowSums(exp_x)
exp_out <- tcrossprod(rs_x, rep(1, nc)) - exp_x
dimnames(exp_out) <- dimnames(exp_x)
log(exp_out)
}
term3 <- .log_exp_shift_sum_rest_cols(x1beta, shift = adj_const)
exp(x - shift)
x
row_maxs <- apply(x, 1, max)
row_maxs
nc <- ncol(exp_x)
row_maxs <- (apply(x, 1, max), rep(1, nc))
row_maxs <- tcrossprod(apply(x, 1, max), rep(1, nc))
nc <- ncol(exp_x)
nc <- ncol(x)
row_maxs <- tcrossprod(apply(x, 1, max), rep(1, nc))
dim(row_maxs)
exp_x <- exp(x - row_maxs)
rs_x <- rowSums(exp_x)
exp_out <- tcrossprod(rs_x, rep(1, nc)) - exp_x
log(exp_out) + row_maxs
nc <- ncol(x)
row_maxs <- tcrossprod(apply(x, 1, max), rep(1, nc))
exp_x <- exp(x - row_maxs)
exp_x
nc <- ncol(exp_x)
rs_x <- rowSums(exp_x)
exp_out <- tcrossprod(rs_x, rep(1, nc)) - exp_x
exp_out <- (tcrossprod(rs_x, rep(1, nc)) - exp_x)
dimnames(exp_out) <- dimnames(exp_x)
log(exp_out) + row_maxs
(tcrossprod(rs_x, rep(1, nc)) - exp_x)
rs_x
(any(is.infinite(out), is.na(out)))
ii = 1
nc <- ncol(x)
tmp_x <- x[, -ii, drop = FALSE]
tmp_x
row_maxs <- apply(tmp_x, 1, max)
exp_x_shift <- tmp_x %>%
{. - tcrossprod(row_maxs, rep(1, ncol(.)))} %>%
exp()
exp_x_shift
log(rowSums(exp_x_shift)) + row_maxs
tmp <- lapply(
1:nc,
function(ii) {
tmp_x <- x[, -ii, drop = FALSE]
row_maxs <- apply(tmp_x, 1, max)
exp_x_shift <- tmp_x %>%
{. - tcrossprod(row_maxs, rep(1, ncol(.)))} %>%
exp()
log(rowSums(exp_x_shift)) + row_maxs
}
) %>%
do.call(cbind, .) %>%
`dimnames<-`(dimnames(x))
tmp
.log_exp_shift_sum_rest_cols_slow <- function(x, ...) {
nc <- ncol(x)
out <- lapply(
1:nc,
function(ii) {
tmp_x <- x[, -ii, drop = FALSE]
row_maxs <- apply(tmp_x, 1, max)
exp_x_shift <- tmp_x %>%
{. - tcrossprod(row_maxs, rep(1, ncol(.)))} %>%
exp()
log(rowSums(exp_x_shift)) + row_maxs
}
) %>%
do.call(cbind, .) %>%
`dimnames<-`(dimnames(x))
out
}
exp_x <- exp(x - shift)
nc <- ncol(exp_x)
rs_x <- rowSums(exp_x)
exp_out <- tcrossprod(rs_x, rep(1, nc)) - exp_x
dimnames(exp_out) <- dimnames(exp_x)
out <- log(exp_out)
# slow, but safe computation
out1 <- .log_exp_shift_sum_rest_cols_slow(x, shift)
out[1:10, ]
out1[1:10, ]
shift
shift
.log_exp_shift_sum_rest_cols_slow <- function(x, shift) {
nc <- ncol(x)
out <- lapply(
1:nc,
function(ii) {
tmp_x <- x[, -ii, drop = FALSE]
row_maxs <- apply(tmp_x, 1, max)
exp_x_shift <- tmp_x %>%
{. - tcrossprod(row_maxs, rep(1, ncol(.)))} %>%
exp()
log(rowSums(exp_x_shift)) + row_maxs
}
) %>%
do.call(cbind, .) %>%
{. - shift} %>%
`dimnames<-`(dimnames(x))
out
}
# slow, but safe computation
out1 <- .log_exp_shift_sum_rest_cols_slow(x, shift)
out1[1:10, ]
out[1:10, ]
.log_exp_shift_sum_rest_cols <- function(x, shift) {
exp_x <- exp(x - shift)
nc <- ncol(exp_x)
rs_x <- rowSums(exp_x)
exp_out <- tcrossprod(rs_x, rep(1, nc)) - exp_x
dimnames(exp_out) <- dimnames(exp_x)
out <- log(exp_out)
if (any(is.infinite(out), is.na(out))) {
# slow, but safe computation
out <- .log_exp_shift_sum_rest_cols_safe(x, shift)
}
out
}
.log_exp_shift_sum_rest_cols_safe <- function(x, shift) {
nc <- ncol(x)
out <- lapply(
1:nc,
function(ii) {
tmp_x <- x[, -ii, drop = FALSE]
row_maxs <- apply(tmp_x, 1, max)
exp_x_shift <- tmp_x %>%
{. - tcrossprod(row_maxs, rep(1, ncol(.)))} %>%
exp()
log(rowSums(exp_x_shift)) + row_maxs
}
) %>%
do.call(cbind, .) %>%
{. - shift} %>%
`dimnames<-`(dimnames(x))
out
}
term3 <- .log_exp_shift_sum_rest_cols(x1beta, shift = adj_const)
term4 <- .log_exp_shift_sum_rest_cols(
x0beta[1, , drop = FALSE],
shift = adj_const
) %>%
as.numeric() %>%
tcrossprod(
rep(1, d1),
.
)
term3
term4 <- .log_exp_shift_sum_rest_cols(
x0beta[1, , drop = FALSE],
shift = adj_const
) %>%
as.numeric() %>%
tcrossprod(
rep(1, d1),
.
)
dimnames(term4) <- dimnames(term3)
term3
out <- x1beta - x0beta - term3 + term4
out
library(hidgenclassifier)
library(hidgenclassifier)
library(hidgenclassifier)
library(hidgenclassifier)
library(hidgenclassifier)
library(hidgenclassifier)
devtools::build()
pkgbuild::check_build_tools
pkgbuild::has_build_tools
pkgbuild::has_compiler
