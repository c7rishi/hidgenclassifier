fit31 = fit3
fit310 = fit30
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
# sqrt(dat_all$tmb)
dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- #sample(p_all, ceiling(0.3*length(p_all)))
(hidgenclassifier:::get_rand_foldid(
Y, nfold = 4
) %in% c(1, 2)) %>%
p_all[.]
p_test <- setdiff(p_all, p_train)
fit3 <- fit_svmc(X = X[p_train, ],
Y = Y[p_train],
min_gamma = 1e-7)#,
fit30 <- fit_svmc(X = X[p_train, ],
Y = Y[p_train],
min_gamma = 1e-7,
scale = TRUE)#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- fit3 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
pred30 <- fit30 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred30$predicted == pred30$observed)
library(hidgenclassifier)
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
sqrt(dat_all$tmb)
# dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- #sample(p_all, ceiling(0.3*length(p_all)))
(hidgenclassifier:::get_rand_foldid(
Y, nfold = 4
) %in% c(1, 2)) %>%
p_all[.]
p_test <- setdiff(p_all, p_train)
fit3 <- fit_svmc(X = X[p_train, ],
Y = Y[p_train],
min_gamma = 1e-7)#,
fit30 <- fit_svmc(X = X[p_train, ],
Y = Y[p_train],
min_gamma = 1e-7,
scale = TRUE)#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- fit3 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
pred30 <- fit30 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred30$predicted == pred30$observed)
library(hidgenclassifier)
library(hidgenclassifier)
?hidgenclassifier::impact
pp = readRDS("data/impact.rda")
load("data/impact.rda")
impact
dim(impact)
colnames(impact)
data.table::setnames(impact, "Gene__Variant", "Variant")
save(impact, "data/impact.rda")
save(impact, file = "data/impact.rda")
save(impact, file = "data/impact.rda", type = "xz")
save(impact, file = "data/impact.rda", compress = "xz")
unique(impact$CANCER_SITE)
cat(unique(impact$CANCER_SITE), sep = ", ")
library(magrittr)
unique(impact$CANCER_SITE) %>% sort() %>% cat(sep=", ")
library(hidgenclassifier)
source('~/GitHub/hidgenclassifier/R/fit_predict_smlc.R')
rm(list=ls())
library(hidgenclassifier)
?fit_mlogit
?fit_svmc
library(hidgenclassifier)
data("impact")
impact
names(impact)
names(impact) %>%
()
glue::glue("\item{<<names(impact)>>}{}{...}", .open = "<<", .close = ">>")
glue::glue("\\item{<<names(impact)>>}{...}", .open = "<<", .close = ">>")
glue::glue("#' \\item{<<names(impact)>>}{...}", .open = "<<", .close = ">>")
source('~/GitHub/hidgenclassifier/R/impact.R')
library(hidgenclassifier)
?BiocManager::install
2+2
?liquidSVM::mcSVM
library(hidgenclassifier)
library(hidgenclassifier)
library(hidgenclassifier)
?screen_variant_mi
?
""
data("impact")
top_v <- variant_screen_mi(
maf = impact,
variant_col = "Variant",
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id",
mi_rank_thresh = 200,
return_prob_mi = FALSE
)
top_v
var_design <- extract_design(
maf = impact,
variant_col = "Variant",
sample_id_col = "patient_id",
variant_subset = top_v
)
var_design
class(var_design)
?extract_design_mdesign_mcat
dim(var_design)
gene_design <- extract_design_mdesign_mcat(
maf = impact,
variant_col = "Variant",
mfeat_col = "Hugo_Symbol",
sample_id_col = "patient_id",
variant_subset = top_v
)
dim(var_design)
gene_design <- extract_design_mdesign_mcat(
maf = impact,
variant_col = "Variant",
mfeat_col = "Hugo_Symbol",
sample_id_col = "patient_id",
variant_subset = top_v
)
dim(gene_design)
devtools::install_github("csgillespie/roxygen2Comment")
library(hidgenclassifier)
devtools::run_examples()
rm(list=ls())
library(hidgenclassifier)
?extract_design_mdesign_sbs96
sbs96_mdesign <- extract_design_mdesign (
maf = impact,
chromosome_col = "Chromosome",
start_position_col = "Start_Position",
end_position_col = "End_Position",
ref_col = "Reference_Allele",
alt_col = "Tumor_Seq_Allele2",
sample_id_col = "patient_id"
)
sbs96_mdesign <- extract_design_mdesign_sbs96(
maf = impact,
chromosome_col = "Chromosome",
start_position_col = "Start_Position",
end_position_col = "End_Position",
ref_col = "Reference_Allele",
alt_col = "Tumor_Seq_Allele2",
sample_id_col = "patient_id"
)
dim(sbs96_mdesign)
class(sbs96_mdesign)
library(hidgenclassifier)
library(hidgenclassifier)
?extract_design_mdesign_sbs96
data("impact")
sbs96_mdesign <- extract_design_mdesign_sbs96(
maf = impact,
chromosome_col = "Chromosome",
start_position_col = "Start_Position",
end_position_col = "End_Position",
ref_col = "Reference_Allele",
alt_col = "Tumor_Seq_Allele2",
sample_id_col = "patient_id"
)
dim(sbs96_mdesign)
rm(list=ls())
data("impact")
sbs96_mdesign <- extract_design_mdesign_sbs96(
maf = impact,
chromosome_col = "Chromosome",
start_position_col = "Start_Position",
end_position_col = "End_Position",
ref_col = "Reference_Allele",
alt_col = "Tumor_Seq_Allele2",
sample_id_col = "patient_id"
)
library(hidgenclassifier)
data("impact")
top_v <- variant_screen_mi(
maf = impact,
variant_col = "Variant",
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id",
mi_rank_thresh = 200,
return_prob_mi = FALSE
)
var_design <- extract_design(
maf = impact,
variant_col = "Variant",
sample_id_col = "patient_id",
variant_subset = top_v
)
data("impact")
cancer_resp <- extract_cancer_response(
maf = impact,
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
canc_resp <- extract_cancer_response(
maf = impact,
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
fit0 <- fit_mlogit(
X = var_design
)
top_v <- variant_screen_mi(
maf = impact,
variant_col = "Variant",
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id",
mi_rank_thresh = 50,
return_prob_mi = FALSE
)
var_design <- extract_design(
maf = impact,
variant_col = "Variant",
sample_id_col = "patient_id",
variant_subset = top_v
)
canc_resp <- extract_cancer_response(
maf = impact,
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
fit0 <- fit_mlogit(
X = var_design,
Y = canc_resp
)
# create five stratified random folds
# based on the response cancer categories
set.seed(42)
folds <- data.table::data.table(
resp = canc_resp
)[,
foldid := sample(rep(1:5, length.out = .N)),
by = resp
]$foldid
folds
canc_resp <- extract_cancer_response(
maf = impact,
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
idx <- names(canc_resp)
pid <- names(canc_resp)
# 80%-20% stratified separation
idx_train <- pid[folds != 5]
idx_test <- pid[folds == 5]
# train a classifier using only variants
# will have low accuracy -- no meta-feature information used
fit0 <- fit_mlogit(
X = var_design[idx_train, ],
Y = canc_resp[idx_train]
)
pred0 <- predict_mlogit(
fit = fit0,
Xnew = var_design[idx_test, ]
)
pred0
library(hidgenclassifier)
?keras::`keras-package`
data("impact")
top_v <- variant_screen_mi(
maf = impact,
variant_col = "Variant",
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id",
mi_rank_thresh = 50,
return_prob_mi = FALSE
)
var_design <- extract_design(
maf = impact,
variant_col = "Variant",
sample_id_col = "patient_id",
variant_subset = top_v
)
canc_resp <- extract_cancer_response(
maf = impact,
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
pid <- names(canc_resp)
# create five stratified random folds
# based on the response cancer categories
set.seed(42)
folds <- data.table::data.table(
resp = canc_resp
)[,
foldid := sample(rep(1:5, length.out = .N)),
by = resp
]$foldid
# 80%-20% stratified separation of training and
# test set tumors
idx_train <- pid[folds != 5]
idx_test <- pid[folds == 5]
# train a classifier on the training set
# using only variants (will have low accuracy
# -- no meta-feature information used
fit0 <- fit_rfc(
X = var_design[idx_train, ],
Y = canc_resp[idx_train],
tune = FALSE
)
pred0 <- predict_rfc(
fit = fit0,
Xnew = var_design[idx_test, ]
)
data("impact")
top_v <- variant_screen_mi(
maf = impact,
variant_col = "Variant",
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id",
mi_rank_thresh = 50,
return_prob_mi = FALSE
)
# train a classifier on the training set
# using only variants (will have low accuracy
# -- no meta-feature information used
fit0 <- fit_nnc(
X = var_design[idx_train, ],
Y = canc_resp[idx_train]
)
library(hidgenclassifier)
# train a classifier on the training set
# using only variants (will have low accuracy
# -- no meta-feature information used
fit0 <- fit_nnc(
X = var_design[idx_train, ],
Y = canc_resp[idx_train]
)
# odds ratio
data("impact")
top_v <- variant_screen_mi(
maf = impact,
variant_col = "Variant",
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id",
mi_rank_thresh = 50,
return_prob_mi = FALSE
)
var_design <- extract_design(
maf = impact,
variant_col = "Variant",
sample_id_col = "patient_id",
variant_subset = top_v
)
canc_resp <- extract_cancer_response(
maf = impact,
cancer_col = "CANCER_SITE",
sample_id_col = "patient_id"
)
pid <- names(canc_resp)
# create five stratified random folds
# based on the response cancer categories
set.seed(42)
folds <- data.table::data.table(
resp = canc_resp
)[,
foldid := sample(rep(1:5, length.out = .N)),
by = resp
]$foldid
# 80%-20% stratified separation of training and
# test set tumors
idx_train <- pid[folds != 5]
idx_test <- pid[folds == 5]
# train a classifier on the training set
# using only variants (will have low accuracy
# -- no meta-feature information used
fit0 <- fit_mlogit(
X = var_design[idx_train, ],
Y = canc_resp[idx_train]
)
pred0 <- predict_mlogit(
fit = fit0,
Xnew = var_design[idx_test, ]
)
or <- odds_ratio_smlc(
fit = fit0,
type = "one-vs-rest"
)
or
class(or)
?predict_mlogit
devtools::run_examples()
devtools::run_examples(fresh = TRUE)
?devtools::run_examples()
devtools::run_examples()
install.packages("gtsummary")
gtsummary::tbl_summary(impact)
impact
dim(impact)
?hidgenclassifier::extract_design_mdesign_mcat
?extract_design
?screen_variant_mi
extract_design_mdesign_sbs96(
maf = impact,
chromosome_col = "Chromosome",
start_position_col = "Start_Position",
end_position_col = "End_Position",
ref_col = "Reference_Allele",
alt_col = "Tumor_Seq_Allele2",
sample_id_col = "patient_id"
)
?extract_tumor
tmb <- extract_tmb(
maf = impact,
variant_col = "Variant",
sample_id_col = "patient_id"
)
devtools::install_github("csgillespie/roxygen2Comment")
knitr::opts_chunk$set(echo = TRUE)
X_variant
X_variant <- extract_design(
maf = impact,
variant_col = "Variant",
sample_id_col = "patient_id",
variant_subset = top_v
)
colnames(X_variant)
XU_gene
XU_gene <- extract_design_mdesign_mcat(
maf = impact,
variant_col = "Variant",
mfeat_col = "Hugo_Symbol",
sample_id_col = "patient_id",
mfeat_subset = NULL
)
colnames(XU_gene)
sbs96_mdesign <- extract_design_mdesign_sbs96(
maf = impact,
chromosome_col = "Chromosome",
start_position_col = "Start_Position",
end_position_col = "End_Position",
ref_col = "Reference_Allele",
alt_col = "Tumor_Seq_Allele2",
sample_id_col = "patient_id"
) %>%
magrittr::set_colnames(
paste("SBS_", .)
)
?predict_smlc
# train a classifier on the training set
# using only variants (will have low accuracy
# -- no meta-feature information used
fit0 <- fit_mlogit(
X = var_design[idx_train, ],
Y = canc_resp[idx_train]
)
pred0 <- predict_mlogit(
fit = fit0,
Xnew = var_design[idx_test, ]
)
names(pred0)
odds_ratio_mlogit()
odds_ratio_mlogit
?odds_ratio_mlogit
library(hidgenclassifier)
devtools::build_vignettes()
devtools::build_vignettes()
devtools::install()
devtools::install()
library(hidgenclassifier)
vignette(package = "hidgenclassifier")
devtools::install()
devtools::install()
devtools::install()
devtools::install()
install.packages("rlang")
devtools::install()
library(hidgenclassifier)
vignette(package = "hidgenclassifier")
library(hidgenclassifier)
library(hidgenclassifier)
vignette(package = "hidgenclassifier")
devtools::build(vignettes = TRUE)
vignette(package = "hidgenclassifier")
devtools::install_github("c7rishi/hidgenclassifier")
devtools::install_github("c7rishi/hidgenclassifier")
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE)
devtools::install_github("c7rishi/hidgenclassifier")
devtools::install_github("c7rishi/hidgenclassifier")
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE)
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE)
vignette(package = "hidgenclassifier")
vignette("impact_anlaysis", package = "hidgenclassifier")
library(hidgenclassifier)
vignette("impact_anlaysis", package = "hidgenclassifier")
?predict_smlc
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE)
devtools::install_github("c7rishi/hidgenclassifier", build_vignettes = TRUE)
cite(hidgenclassifier)
cite("hidgenclassifier")
citation("hidgenclassifier")
