p_test <- setdiff(p_all, p_train)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train])#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- predict_svmc(Xnew = X[p_test, ], fit = fit3, Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
dat_all <- readRDS(
glue::glue(
"../pipeline_hidgen_classify_allplatforms/data\\
/cancer_X_XU_pcawg_targeted.RDS"
)
)
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
sqrt(dat_all$tmb)
# dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- sample(p_all, ceiling(0.3*length(p_all)))
p_test <- setdiff(p_all, p_train)
library(hidgenclassifier)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train])#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- predict_svmc(Xnew = X[p_test, ], fit = fit3, Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
# sqrt(dat_all$tmb)
dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- sample(p_all, ceiling(0.3*length(p_all)))
p_test <- setdiff(p_all, p_train)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train])#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- predict_svmc(Xnew = X[p_test, ], fit = fit3, Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
library(hidgenclassifier)
library(hidgenclassifier)
library(magrittr)
dat_all <- readRDS(
glue::glue(
"../pipeline_hidgen_classify_allplatforms/data\\
/cancer_X_XU_pcawg_targeted.RDS"
)
)
# XX <- extract_meta
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
sqrt(dat_all$tmb)
# dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- sample(p_all, ceiling(0.3*length(p_all)))
p_test <- setdiff(p_all, p_train)
library(hidgenclassifier)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train])#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- predict_svmc(Xnew = X[p_test, ], fit = fit3, Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
library(magrittr)
dat_all <- readRDS(
glue::glue(
"../pipeline_hidgen_classify_allplatforms/data\\
/cancer_X_XU_pcawg_genome.RDS"
)
)
# XX <- extract_meta
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
sqrt(dat_all$tmb)
# dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- sample(p_all, ceiling(0.3*length(p_all)))
p_test <- setdiff(p_all, p_train)
library(hidgenclassifier)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train])#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- predict_svmc(Xnew = X[p_test, ], fit = fit3, Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
# sqrt(dat_all$tmb)
dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- sample(p_all, ceiling(0.3*length(p_all)))
p_test <- setdiff(p_all, p_train)
library(hidgenclassifier)
# tmp <- fit_rfc(X = X[p_train, ], Y = Y[p_train])
fit20 = fit2
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train])#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- predict_svmc(Xnew = X[p_test, ], fit = fit3, Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
sqrt(dat_all$tmb)
# dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- sample(p_all, ceiling(0.3*length(p_all)))
p_test <- setdiff(p_all, p_train)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train], min_lambda = 1e-7)#,
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train], min_gamma = 1e-7)#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- predict_svmc(Xnew = X[p_test, ], fit = fit3, Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
hidgenclassifier:::get_rand_foldid(
Y, nfold = 4
)
p_train <- #sample(p_all, ceiling(0.3*length(p_all)))
(hidgenclassifier:::get_rand_foldid(
Y, nfold = 4
) %in% c(1, 2)) %>%
p_all[.]
p_train
p_test <- setdiff(p_all, p_train)
library(hidgenclassifier)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train], min_gamma = 1e-7)#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- predict_svmc(Xnew = X[p_test, ], fit = fit3, Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
# sqrt(dat_all$tmb)
dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- #sample(p_all, ceiling(0.3*length(p_all)))
(hidgenclassifier:::get_rand_foldid(
Y, nfold = 4
) %in% c(1, 2)) %>%
p_all[.]
p_test <- setdiff(p_all, p_train)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train], min_gamma = 1e-7)#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- predict_svmc(Xnew = X[p_test, ], fit = fit3, Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
dat_all <- readRDS(
glue::glue(
"../pipeline_hidgen_classify_allplatforms/data\\
/cancer_X_XU_pcawg_exome.RDS"
)
)
# XX <- extract_meta
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
# sqrt(dat_all$tmb)
dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- #sample(p_all, ceiling(0.3*length(p_all)))
(hidgenclassifier:::get_rand_foldid(
Y, nfold = 4
) %in% c(1, 2)) %>%
p_all[.]
p_test <- setdiff(p_all, p_train)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train], min_gamma = 1e-7)#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- predict_svmc(Xnew = X[p_test, ], fit = fit3, Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
# sqrt(dat_all$tmb)
# dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- #sample(p_all, ceiling(0.3*length(p_all)))
(hidgenclassifier:::get_rand_foldid(
Y, nfold = 4
) %in% c(1, 2)) %>%
p_all[.]
p_test <- setdiff(p_all, p_train)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train], min_gamma = 1e-7)#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- predict_svmc(Xnew = X[p_test, ], fit = fit3, Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
# XX <- extract_meta
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
sqrt(dat_all$tmb)
# dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- #sample(p_all, ceiling(0.3*length(p_all)))
(hidgenclassifier:::get_rand_foldid(
Y, nfold = 4
) %in% c(1, 2)) %>%
p_all[.]
p_test <- setdiff(p_all, p_train)
library(hidgenclassifier)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train], min_gamma = 1e-7)#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- predict_svmc(Xnew = X[p_test, ], fit = fit3, Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train], min_gamma = 1e-7)#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- predict_svmc(Xnew = X[p_test, ], fit = fit3, Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
library(hidgenclassifier)
library(hidgenclassifier)
3/2*(2^4/4 - 2 * 2^3/3 + 2^2/2)
3/2*(2^5/5 - 2 * 2^4/3 + 2^3/3)
3/2*(2^5/5 - 2 * 2^4/4 + 2^3/3)
dd = diag(2, 3)
dd
dd = cbind(dd, 0)
dd
scale(dd)
library(hidgenclassifier)
library(magrittr)
dat_all <- readRDS(
glue::glue(
"../pipeline_hidgen_classify_allplatforms/data\\
/cancer_X_XU_pcawg_exome.RDS"
)
)
# XX <- extract_meta
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
sqrt(dat_all$tmb)
# dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- #sample(p_all, ceiling(0.3*length(p_all)))
(hidgenclassifier:::get_rand_foldid(
Y, nfold = 4
) %in% c(1, 2)) %>%
p_all[.]
p_test <- setdiff(p_all, p_train)
library(hidgenclassifier)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train], min_gamma = 1e-7)#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- predict_svmc(Xnew = X[p_test, ], fit = fit3, Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train], min_gamma = 1e-7, scale = TRUE)#,
fit30 <- fit_svmc(X = X[p_train, ], Y = Y[p_train], min_gamma = 1e-7, scale = TRUE)#,
library(hidgenclassifier)
library(hidgenclassifier)
fit30 <- fit_svmc(X = X[p_train, ], Y = Y[p_train], min_gamma = 1e-7, scale = TRUE)#,
library(hidgenclassifier)
fit3 <- fit_svmc(X = X[p_train, ], Y = Y[p_train], min_gamma = 1e-7)#,
fit30 <- fit_svmc(X = X[p_train, ], Y = Y[p_train], min_gamma = 1e-7, scale = TRUE)#,
pred3 <- fit3 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
pred30 <- fit30 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred30$predicted == pred30$observed)
library(hidgenclassifier)
pred30 <- fit30 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
attr(
fit$X,
"scaled:scale"
)[colnames(fit$X)]
head(Xnew)
head(fit$X)
fit$X[1:10, 1:10]
library(hidgenclassifier)
library(hidgenclassifier)
fit30 <- fit_svmc(X = X[p_train, ],
Y = Y[p_train],
min_gamma = 1e-7,
scale = TRUE)#,
fit3 <- fit_svmc(X = X[p_train, ],
Y = Y[p_train],
min_gamma = 1e-7)#,
pred3 <- fit3 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
pred30 <- fit30 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred30$predicted == pred30$observed)
Xscale <- rep(1, ncol(Xnew_adj)) %>%
setNames(colnames(Xnew_adj))
Xscale[colnames(Xold_names)] <- attr(
fit$X,
"scaled:scale"
)[colnames(fit$X)]
Xscale
Xold_names <- colnames(fit$X)
Xnew_adj <- Xnew %>%
fill_sparsemat_zero(
rownames = rownames(.),
colnames = Xold_names
)
Xscale <- rep(1, ncol(Xnew_adj)) %>%
setNames(colnames(Xnew_adj))
Xscale
Xscale[colnames(Xold_names)] <- attr(
fit$X,
"scaled:scale"
)[colnames(fit$X)]
Xscale
Xnew_adj1 <- Xnew_adj %>%
scale(center = FALSE, scale = Xscale) %>%
Matrix::Matrix(sparse = TRUE)
Xnew_adj1 <- Xnew_adj %>%
divide_cols(Xscale) %>%
Matrix::Matrix(sparse = TRUE)
Xnew_adj2 <- Xnew_adj %>%
scale(center = FALSE, scale = Xscale) %>%
Matrix::Matrix(sparse = TRUE)
all.equal(Xnew_adj1, Xnew_adj2)
microbenchmark::microbenchmark(  Xnew_adj2 = Xnew_adj %>%
scale(center = FALSE, scale = Xscale) %>%
Matrix::Matrix(sparse = TRUE),
Xnew_adj1 = Xnew_adj %>%
divide_cols(Xscale) %>%
Matrix::Matrix(sparse = TRUE))
Xnew_adj <- Xnew_adj %>%
divide_cols(Xscale) %>%
Matrix::Matrix(sparse = TRUE)
Xnew_adj <- Xnew %>%
fill_sparsemat_zero(
rownames = rownames(.),
colnames = Xold_names
)
Xscale <- rep(1, ncol(Xnew_adj)) %>%
setNames(colnames(Xnew_adj))
Xscale[colnames(Xold_names)] <- attr(
fit$X,
"scaled:scale"
)[colnames(fit$X)]
Xnew_adj <- Xnew_adj %>%
divide_cols(Xscale) %>%
Matrix::Matrix(sparse = TRUE)
Xnew_adj
library(hidgenclassifier)
fit3 <- fit_svmc(X = X[p_train, ],
Y = Y[p_train],
min_gamma = 1e-7)#,
fit30 <- fit_svmc(X = X[p_train, ],
Y = Y[p_train],
min_gamma = 1e-7,
scale = TRUE)#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- fit3 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
pred30 <- fit30 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred30$predicted == pred30$observed)
dat_all <- readRDS(
glue::glue(
"../pipeline_hidgen_classify_allplatforms/data\\
/cancer_X_XU_pcawg_exome.RDS"
)
)
dat_all <- readRDS(
glue::glue(
"../pipeline_hidgen_classify_allplatforms/data\\
/cancer_X_XU_pcawg_genome.RDS"
)
)
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
sqrt(dat_all$tmb)
# dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- #sample(p_all, ceiling(0.3*length(p_all)))
(hidgenclassifier:::get_rand_foldid(
Y, nfold = 4
) %in% c(1, 2)) %>%
p_all[.]
p_test <- setdiff(p_all, p_train)
fit3 <- fit_svmc(X = X[p_train, ],
Y = Y[p_train],
min_gamma = 1e-7)#,
fit30 <- fit_svmc(X = X[p_train, ],
Y = Y[p_train],
min_gamma = 1e-7,
scale = TRUE)#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- fit3 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
pred30 <- fit30 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred30$predicted == pred30$observed)
fit31 = fit3
fit310 = fit30
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
# sqrt(dat_all$tmb)
dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- #sample(p_all, ceiling(0.3*length(p_all)))
(hidgenclassifier:::get_rand_foldid(
Y, nfold = 4
) %in% c(1, 2)) %>%
p_all[.]
p_test <- setdiff(p_all, p_train)
fit3 <- fit_svmc(X = X[p_train, ],
Y = Y[p_train],
min_gamma = 1e-7)#,
fit30 <- fit_svmc(X = X[p_train, ],
Y = Y[p_train],
min_gamma = 1e-7,
scale = TRUE)#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- fit3 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
pred30 <- fit30 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred30$predicted == pred30$observed)
library(hidgenclassifier)
X <- dat_all[c("sbs", "Gene", "window", "tmb")] %>%
.[c('window')] %>%
do.call(cbind, .) %>%
hidgenclassifier::divide_rows(
sqrt(dat_all$tmb)
# dat_all$tmb
)
Y <- dat_all$canc_cat
p_all <- names(Y)
set.seed(102)
p_train <- #sample(p_all, ceiling(0.3*length(p_all)))
(hidgenclassifier:::get_rand_foldid(
Y, nfold = 4
) %in% c(1, 2)) %>%
p_all[.]
p_test <- setdiff(p_all, p_train)
fit3 <- fit_svmc(X = X[p_train, ],
Y = Y[p_train],
min_gamma = 1e-7)#,
fit30 <- fit_svmc(X = X[p_train, ],
Y = Y[p_train],
min_gamma = 1e-7,
scale = TRUE)#,
# min_lambda = 1e-7, max_lambda = 1e6)
pred3 <- fit3 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred3$predicted == pred3$observed)
pred30 <- fit30 %>%
predict_svmc(Xnew = X[p_test, ], Ynew = Y[p_test])
mean(pred30$predicted == pred30$observed)
library(hidgenclassifier)
library(hidgenclassifier)
?hidgenclassifier::impact
pp = readRDS("data/impact.rda")
load("data/impact.rda")
impact
dim(impact)
colnames(impact)
data.table::setnames(impact, "Gene__Variant", "Variant")
save(impact, "data/impact.rda")
save(impact, file = "data/impact.rda")
save(impact, file = "data/impact.rda", type = "xz")
save(impact, file = "data/impact.rda", compress = "xz")
unique(impact$CANCER_SITE)
cat(unique(impact$CANCER_SITE), sep = ", ")
library(magrittr)
unique(impact$CANCER_SITE) %>% sort() %>% cat(sep=", ")
library(hidgenclassifier)
